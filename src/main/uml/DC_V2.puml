@startuml

title __DC v1__\n

namespace v1 {

    abstract class Ant extends Occupant
    {
        - colony : Colony

        + deplacementValide( x : int, y : int):boolean
        + deplacerVers( x : int, y : int)
        + seDeplacer()
        + getColony() : Colony
        + getListeVoisins() : ArrayList<int[]>

    }

    interface AntFacadeController
    {
        {abstract} + createColony()
        {abstract} + createGrid()
        {abstract} + createSoldiers()
        {abstract} + createWorkers()
        {abstract} + play() : BitSet[][]
        {abstract} + putFood()
        {abstract} + putObstacle()
        {abstract} + setAntFile()
        {abstract} + setParameters()
    }

    class Colony extends Occupant
    {
        - foodDeposit : int
        - foodWithdrawal : int

        + getFoodWithdrawal : int
        + getFoodDeposit() : int

        + getReine() : Reine
    }


    class Display extends javax.swing.JFrame
    {
        - cellSize : int
        - height : int
        - width : int

        + update(cells : BitSet[][])
    }

    class Food extends Occupant
    {
        - quantity : int

        + getQuantity(): int
        + setQuantity(newQty : int)
    }

    class FourmiSoldatTest
    {
        {static} ~ HEIGHT : int
        {static} ~ WIDTH : int
        ~ setUp()
        ~ test0()
        ~ test1()
        ~ test2()
        ~ test3()
        ~ test4()
        ~ testPutObstacle()
    }

    class GameController implements AntFacadeController
    {
        + rdm : Random
        - graphe : Graphe
        - evaporationParam : int
        - foodParam : int
        - pheromoneParam : int

        + setParameters(evaporationParam : int, foodParam : int, pheromoneParam : int)
        + createGrid(width : int, height : int)
        + putObstacle(row : int, column : int)
        + putFood(row : int, column : int, quantity : int)
        + createColony(width : int, height : int)
        + createSoldiers(amount : int)
        + createWorkers(amount : int)
        + setAntFile(antLogFile : String)
        + play(duration : int, record : boolean) : BitSet[][]
        - refreshBitSet(bs : BitSet[][], graphe : Graphe)
    }

    class Graphe
    {
        - tabGrid final : ArrayList<Occupant>[][]
        - listAnts final : ArrayList<Ant>

        + getFourmiliere() : Colony
        + getListFourmis() : ArrayList<Ant>
        + getTabGrid() : ArrayList<Occupant>[][]
        + contientFourmiliere(x:int, y:int) : boolean
        + contientObstacle(x:int, y:int) : boolean
        + contientSoldat(x:int, y:int) : boolean
        + contientPheromone( x : int, y : int) : boolean
        + getListFourmis() : ArrayList<Ant>
        - fill()
        + getPheromoneAt( x : int, y : int) : Pheromone
        + getFoodAt( x : int, y : int) : Food
        + contientOuvriereVide( x : int, y : int) : boolean
        contientOuvrierePorteuse( x : int, y : int) : boolean
        contientNourriture( x : int, y : int) : boolean
        putFood( x : int, y : int, quantity : int)
    }

    class Main
    {
        {static} + main(args : String[])
    }

    class MyOwnTest
    {
        ~ run(controller : AntFacadeController)
    }

    class Obstacle extends Occupant
    {

    }

    class Occupant
    {
        - x : int
        - y : int
        - final graphe : Graphe

        + getGraphe() : Graphe
        + getX() : int
        + getY() : int
        + setX()
        + setY()
    }

    class Pheromone extends Occupant
    {
        - quantity : int

        + getQuantity() : int
        + setQuantity(newQty : int)
        + evaporate(evapQty : int)

    }
    class Queen extends Ant
    {
        + donnerVie(c : Colony)
    }

    class Soldier extends Ant
    {
        + deplacementHasard()
        + seDeplacer()
    }

    class Worker extends Ant
    {
        - carried : int
        - listeCasesParcourues : ArrayList<int[]>

        + depositPheromone()
        + takeFood()
        + seDeplacer()
        - getBestLocation() : int[]
        - isSorted(list : ArrayList<int[]> ) : Boolean
        + getListeCasesParcourues() : ArrayList<int[]>
        + getCarried() : int
        //+ withdrawPheromone()
   }

    abstract class Parameters
    {
        - evaporationQty : int
        - foodParam : int
        - pheromoneParam : int
    }

    Main -> MyOwnTest : démarre une partie
    MyOwnTest -up-> Display : affiche les déplacements
    MyOwnTest --> GameController : gère la partie
    FourmiSoldatTest *-- AntFacadeController : utilise
    GameController "1" --> "n" Graphe : gère le déroulement >
    Occupant "n" -* "1" Graphe : occupe >
}
@enduml
