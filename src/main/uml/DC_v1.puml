@startuml
'https://plantuml.com/class-diagram

class Fourmi extends Occupant
{
    + Fourmi(x,y,g:grid)

    + deplacementHasard(g:grid)
    + deplacerVers(x,y,g:grid)
    + deplacementValide(newX, newY, g:grid): Boolean
    + toString():String
}

class Reine extends Fourmi
{
    + Reine(x,y,grid)
    + donnerVie()
    + toString() : String
}

class Fourmiliere extends Occupant
{
    + Fourmiliere(rdmX, rdmY, grid)

    + toString() : String
    + getReine() : Reine
}

class Grid
{
    Random rdm

    - tabGrid : ArrayList<Occupant>[][]
    - listObstacles : ArrayList<Obstacle>
    - listFourmis : ArrayList<Fourmi>

    + Grid(width, height) : void
    - getFourmiliere() : Fourmiliere
    - putFourmiliere(grid)
    + getListFourmis() : ArrayList<Fourmi>
    - putFourmis(reine, nbFourmis)
    + getTabGrid() : ArrayList<Occupant>[][]
    + putObstacles(<Occupant> grid, nbObstacles)
    - contientFourmiliere(x,y): Boolean
    - contientObstacle(x,y): Boolean
    + showGrid()
    - stringList(occupants) : String
    - fill()
    + getListObstacles() : ArrayList<Obstacle>
    + showListObstacle()
}

class Main
{
    +(static) main
}


class Soldat extends Fourmi
{
+ Soldat(x,y,grid)
+ deplacementHasard(grid)
+ toString() : String
}




class Occupant
{
    - x : int
    - y : int
    - grid : Grid
    + Occupant(x,y,grid)
    + getGrid() : Grid
    + getX(): int
    + getY(): int
    + toString()
    + setX()
    + setY()

}
class Obstacle extends Occupant
{
    + Obstacle(x,y,grid)
    + toString()
}


Main -> Grid : crée
Grid -> Occupant : possède
Reine -> Fourmi : crée
Fourmiliere --> Reine : contient
Grid --> Fourmiliere : contient
Grid -> Obstacle : contient

@enduml